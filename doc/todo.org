* files
** [[C:\dev\projects\codebench\lib\artifact.rb]]
*** load artifact classes (in A<n> format)
*** Artifact
**** code - source code template
**** list - child artifacts or elements?
**** doc - description
**** ldoc - long description
**** file - filename (actual or virtual?)
**** line - line number in (virtual?) file
**** slot - multiline section?
**** index (?)
**** parent (parent in artifact tree)
**** list_children
**** context (context for configuration)
*** Art (top level methods)
**** get by name - get a list of artifacts with a name
get_by_name
**** get root artifact
get_root
**** get artifact using path
get_by_path
**** get a child artifact using name or index
get_child
**** parse a path string
parse_path
***** absolute or relative
***** use name or numeric index
**** set current node in artifact tree
set_current
**** set current file path?
**** get artifact with file name
get_file
**** get file contents for file in artifacts
get_file_contents
** [[C:\dev\projects\codebench\lib\artifacts\a0.rb]]
*** artifact methods
**** name
**** code
**** doc
**** ldoc
**** file
**** line
**** parent (defaults)
** [[C:\dev\projects\codebench\lib\artifacts\a8.rb]]
*** artifact methods
**** type: 'file' (for file type)
** [[C:\dev\projects\codebench\lib\artifacts\a9.rb]]
*** use parent and code to add code to a file (artifact is subfile)
** [[C:\dev\projects\codebench\lib\artifacts\a12.rb]]
*** use line to put code in another part of file
** [[C:\dev\projects\codebench\lib\artifacts\a16.rb]]
*** context: show use of text context
** [[C:\dev\projects\codebench\lib\artifacts\clojure_context.rb]]
*** structure: metadata for program artifact (entry point file in this case)
*** executor: syntax template for command line
*** main_body: template for entry point file
*** defaults for name, code
*** parent: put context in tree (parent is exec contexts node in this case)
** [[C:\dev\projects\codebench\lib\orch.rb]]
*** methods
**** initialize: get context methods
**** execute: execute code in memory or through system
**** execute_tasks: execute submethods to run full process
**** capture: execute system command and capture the results
**** generate_source: generate source from template
**** generate_executor: generate execution command from template
**** format_outputter: create file/code structures
**** save_sources: save file structures
**** parse_results: adjust results for various contexts
** [[C:\dev\projects\dev-notes\art-things.org]]
*** make stage structure
*** stages
**** artifact => generate
**** generated source => save
**** filesystem source => compile
**** filesystem source => run
**** filesystem executable => run
**** filesystem results => read
**** results => user observes
*** stage reduction
stages:
- <first_stage>
- <second stage>
- ...
a: ...
b: ...
c: ...

=> first stage runs and results in:
stages:
- <second stage>
- ...
a: <changed>
c: <unchanged>
d: <added>
# b was removed
*** results
- these are strictly in a structure (sensing comes before)
**** call result
***** predicate result
**** stdout
**** stderr
**** file
***** filesystem info
****** file attributes
****** dir info
**** environment var
**** global var
**** doc
***** long/short
***** keywords/categories
***** artifact version
**** generated source
**** exception info
**** trace info
**** database data
**** list
***** artifacts
***** other things
** [[C:\dev\projects\dev-notes\howto.org]]
stages:
- setup
- gen files
- save files
- commands
- sense effects
** [[C:\dev\projects\dev-notes\howto.org]]
*** conversions/transformations as views
same mechanism as art view
*** possible keys
<no key> (value)
sensors
children
name
doc
ldoc
code ; in tree form
  name ; file name (or other code location)
source
text
params
<param name>
lang
deps
stages
  context
id
version
notes
created at
updated at
keywords/categories
execution context
inputs
outputs
  expectations for tests
<exec lang/sublang>
** [[C:\dev\projects\dev-notes\temp-qd-art\art]]
*** setup thor art executor
*** gen: generate code from template
*** list: list artifacts for node
*** exec: execute code from template
*** doc: show documentation
*** show: show tree for artifact
** [[C:\dev\projects\dev-notes\temp-qd-art\executors.rb]]
*** execute: execute code and sense output
*** template: template for source code
** [[C:\dev\projects\solos\exec-reconcile.rb]]
# this is a reconcile of previous versions of art/exec
# final goal is to merge back into another one of these systems
# exec types:
# - *just exec
# - *exec with params
# - exec multiple times (w/ params)
# - *exec with deps
# - exec with alternate dep
#   - from value
#   - from fixture
#   - from random
#   - alternate function calls
# - exec alternate (same language)
# - exec with language specified
# - *generate
# - *doc
# - index terms (doc and keywords)
# - missing info
# - parse
# - char tests?
# - exec with value trace
#
# main exec takes a map with "source" => "..."
# todo: search for instances of exec or art
# add exec with yaml (calls regular exec)
# add exec with defaults (merges a default map)
# emacs helpers
# - xiki?
# - org-babel helpers
# implement cutpoints
# - before line
#   - show location
#   - show value of inputs/dependencies
#     - or save value of inputs/dependencies
#   - change value of inputs/dependencies
# - at line
#   - replace line
# - after line
#   - show value of outputs/results
# implement cutpoint helpers
# - ruby
# - javascript
# - java
# - clojure? (may be already integrated with exec functionality)
#
# merge params both ways
# - artifacts specialize default parameters
# - some default parameters are protected (artifacts don't change them)
# - artifacts add to default lists
#
# add view(s) for execute results

# - generate
# - execute(tasks)
#   - iterate over tasks
#     - eval: eval task["code"]
# - execute_task
# - merge_params
# - generate_task
# - build
# - expressions(code)

*** generate
*** execute: iterate over tasks and execute each
*** execute_task
*** build
*** statements
*** doc
*** capture
** [[C:\doc\repo\scratch-160408.org]]
- methods/functions
- modules/classes
- constructs/patterns
- tranformations/refactorings
- examples
- other parsers
- other generators

- ptd
- rails apps from books
  - generators
- android apps from book
  - generators
- ruby code from book
- study lisp
- emacs configs
- thor tutorials
  - generators
- gregorystanley.com
- yelp/glassdoor

- virtual files
- repl => save code in database as a flat virtual file
- source code => save code in a database as a virtual file
- code metadata screen (user fills in)
  - drop down list for known values
  - language
  - equivalence classes
  - standard equivalence classes
  - sensing functions
- insert code like yasnippet
  - available code in database
- exporters
- save code in tree format (ast)

+ save artifact
+ list artifacts
+ enter metadata for artifact
+ generate artifact
+ execute artifact
- associate artifact with file
- execute artifact w/ language metadata
- enter artifact: expression/statement/code block
- import code from file
- incorporate artifact code
- get artifact by path
- list artifacts by path
- get artifact by path with id
- list artifacts by path with id
- integrate with next
- integrate with laser

- source at line
- file at line
- variables in scope
- value of variable
- value of expression
- stack frame
- fake a function call
- class and method at line
---
- line trace
  - use a watcher like disp
- variables trace
  - use a watcher like disp
  - include actual types
- dependency tree
- code slice?
- possible values/equivalence classes
- special step/next commands that save what I want
  - change the way current line is evaluated
    - execute stub methods
    - execute code from another language (ex. debug java code)?
- integrate with previous
- integrate with laser

- unit test
- thor task
- boson task
- tap task
- treetop parser
- rails action
- ruby-debug command
- erb template
- rake task
- plain script
- method in memory (ex. irb)
- emacs org-babel block
- eev escript
- xiki ?
** [[C:\doc\repo\scratch-160419.org]]
*** use lang to execute
**** DONE basic execution context
**** DONE text artifact
**** DONE ruby artifact
**** DONE shell artifact
**** DONE lisp artifact (clisp)
**** DONE elisp artifact
**** DONE racket artifact
**** DONE clojure artifact
**** haskell artifact
**** javascript artifact
**** scala artifact
**** c++ artifact
- shows off compiled code
*** versioning
- go back and assign versions to git commits
*** use code in list flag
*** generate with params
*** artifact with parent
*** inherit params from parent
**** parent has param
**** child and parent have params
**** child inherits code from parent and has params (parent might have default)
*** create artifact (classes | objects) from yaml
**** multiple yaml files/dirs
*** global variable sensor
- generalize sensors
**** specify sensors
- change execute based on specified sensors
*** execution context
**** different ways to build source
**** DONE specify language
- move from lang attribute?
**** different ways to execute code (generated) or executable/library (compiled)
**** specify dependencies here?
**** inherit exec context
***** exec context path
*** transform results
*** handle errors/missing dependencies
*** list not implemented/not been done features from artifacts
*** execute/generate multiple artifacts, file, part of file
*** debugger execution context
*** stepper execution context
*** repl execution context
**** save to history (virtual) file - on/off
*** pipeline execution context
*** artifact search
*** DONE show doc
*** DONE show ldoc
*** DONE art with file location
**** DONE slot number/line number
- example: *history* has slot number
**** DONE art with virtual file: *history*
*** DONE get art by name
*** DONE get art by path
**** DONE /
**** DONE /a/b/c
*** DONE use/change current path
*** DONE get art by path w/ index
*** DONE list artifact children
*** DONE list top children
*** DONE list for file
*** DONE back out class -> instance conversion
*** DONE test that runs all tests
*** DONE basic Orchestrator
** [[D:\dev\src\2014\08Aug\codebench\doc\project.org]]
*** start after break
**** TODO gather requirements from old projects
**** art-req
***** parse /project/node_name#2/subnode
****** separate next named node with /
****** separate next numbered node with #
***** nodes are:
****** file system directories
****** org file headlines
****** yaml/xml nodes
****** modules/classes/methods/functions inside scripts/libraries
****** thor namespaces/actions
***** explore nodes with dired-like interface
***** previous stuff
****** [[file:I:\src\art_db.txt][art_db.txt]]
******* artifact
******** id
******** name
******** version
******** doc
******** notes
******** code
******** timestamps?
******* list
******** id
******** name
******** doc
******* list_item
******** id
******** list_id
******** item
******** doc
******* keyword
******** id
******** name
******** type? (category/keyword)
******** doc
******* art_keyword
******** id
******** art_id
******** keyword_id
******* execution_context
******** id
******** name
******** script?
******** doc
******* art_execution
******** id
******** art_id
******** exec_id
****** [[file:i:/pim/index.org::run named command][index.org]]
****** [[file:i:/src/proto/0022][src/proto/0022]]
******* [[file:i:/src/proto/0022/artdb.leo][artdb.leo]]
**** DONE handle artifact directories
- merge existing code & decide on best solution
*** explorer
**** TODO look at old projects
**** TODO explore/bootstrap odb
**** TODO implement with
***** instrumentation
***** Explorer.add( src, ... )
**** TODO parser for source automagically pulls out metadata e.g. local variables
**** TODO handle
***** TODO generic execution language
***** TODO ruby
***** TODO haskell
***** TODO lisp
***** TODO java
**** TODO code slicing
**** TODO in/out analysis
**** TODO input combinations
**** TODO study unravel, indus, frama-c, ...
**** TODO look at pseudocode for generic execution language
***** [[http://www.bfoit.org/Intro_to_Programming/Pseudocode.html][Intro to Programming - Pseudocode]]
***** [[http://users.csc.calpoly.edu/~jdalbey/SWE/pdl_std.html][Pseudocode Standard]]
*** TODO optional artid to make not be stuck with ordering
- /path/id<n>
*** TODO create tests for current code to understand
*** TODO code block/tests in orgfile
*** emacs tasks
**** TODO tests from emacs (org-babel)
**** TODO artifact list mode
*** TODO [[http://en.wikipedia.org/wiki/Pipeline_%28software%29][Pipelines in GUIs]]
*** TODO fix multiple parents for an artifact after I get rid of artids
might keep artid as an option for code_location link
*** TODO an .art_config file in a directory provides default configuration for directories and artifacts in the directory
*** TODO change repository load to not drill down for art files
*** TODO save state of tree when exiting
*** TODO multiple history files can be in the system
- including one default/master history (in main .artifacts dir)
- each project may have a history (or histories)
*** TODO history/repl is kept in a tree so that you can go up the tree and use the defaults
for the parent node instead of the defaults for the current line of
history which change with default nodes
*** TODO pull in code from exec project
**** TODO use new locator
**** TODO merge artenvironment with repository
**** TODO lose art_ids
- use children attributes instead
- will make changing artifacts more difficult
- use internal art_id?
**** DONE add new tasks
*** TODO always use '.' for command line; never use '.' for gui
took '.' out of locations
*** tasks from exec
**** TODO [[www.faqs.org/docs/artu/ch11s07.html#id2960228][Polyvalent-Program Pattern]]
***** application-domain logic in a library with an api
***** api documentation
***** cantrip/cli batch mode script
***** gui
***** scripting interface using a scripting language
***** unit test
***** optional
****** rogue interface using curses
****** web interface
**** TODO locator object
***** TODO locate artifact
****** TODO in evernote
****** TODO using namespaces
****** TODO utility repo (tap, thor, boson...)
****** TODO in library
****** TODO in db
****** TODO in source code
- by line numbers
- by name
****** TODO in orgfile
****** TODO on clipboard
****** TODO find using incomplete location info
****** TODO find using indexed info
****** TODO using url
- maybe use a routing mechanism like rails routes
****** TODO using alias
****** DONE in yaml
****** DONE filesystem location
***** TODO resolve map from one location to another
map could be in a file
map could be in a db
***** DONE list artifacts
***** DONE Locator subclasses to handle location types
like a DBLocator that can find an art in a database
**** TODO an exec function that takes
***** an artifact
***** a config hash
****** function parameters
****** options for runner
****** the language
***** a view
**** TODO rework views
**** TODO execution views
***** DONE syntax
ex:view:view(param,param):view
***** DONE out
***** DONE err
***** DONE result
***** vars (specified in art)
***** clipboard
***** hirb
***** custom (specified in art)
***** yaml
***** emacs buffer
***** DONE console
***** popup window
***** anything?
***** input
****** TODO default
****** dialog
****** highline
****** piped/stdin
***** check if should implement as monads
**** TODO add wrapper code (like the (print ...) in lisp)
- on view list?
- typical wrapper will set 'stdout', 'result', others in yaml
- boilerplate code
**** TODO script to provide --cmd and --name parameters (tap specific)
**** TODO allow org mode as a format for artifacts
**** TODO bring in codebench repository handling
**** contexts:
***** TODO c/c++
***** TODO lisp
***** TODO bash
***** TODO other languages
***** TODO library call (lib or dll/so)
***** TODO emacs function
***** TODO url
***** TODO tap workflow (using tap syntax)
***** TODO parser
***** TODO emacs - anything
***** generator
****** TODO with execution
****** TODO without execution (useful for artifacts with complex dependencies (like rails) that I may not want to run through art) (or may be dangerous to run)
***** TODO sql
***** TODO exec context custom code in an artifact
**** TODO examples:
    code template with params like:
      code: Hello <%= name_param %>
      examples:
      - name_param: Bob
        result: Hello Bob
      - name_param: Carol
        result: Hello Carol
    result can be used to run example as a test
**** TODO default test is assert_equal; support other kinds of tests (e.g. match_result -> assert_match)
**** TODO links (useful for table of contents, favorites)
**** TODO links to other places in filesystem
**** TODO top level commands? (don't need /; implemented as links)(favorites/toc/artifact.yml)
**** TODO use yaml attributes to provide data to tap (e.g. --help displays doc from yaml)
**** TODO completion to fill in artifact nodes (directories/internal nodes)
***** TODO case insensitive
***** TODO skip underscores
***** TODO search artifact for keywords (any text that makes the artifact unique)
***** TODO complete intervening nodes if unique keyword is found down the tree
**** TODO gui for changing artifacts:
***** TODO tree list
***** TODO drag & drop for contexts/categories
***** TODO execute from button
***** TODO create artifact from text entry
**** TODO create artifact from emacs region
**** TODO execute artifact from emacs
**** TODO execute artifact from org/outline node
**** TODO birds from To Mock a Mockingbird
**** TODO add search (with indexing?)
**** TODO save artifacts in db (in addition to ~/.artifact)
**** TODO use rcapture to get more info from execution
**** TODO pass results along pipeline for other contexts
***** TODO use monads
***** TODO add a splitter/data transformer function to artifact
- gets received data into correct form (lines, characters,
  object/hash...)
***** TODO implicit splitter/data transformers between each artifact
***** TODO an artifact can act as an explicit transformer
**** DONE imported old codebench code
**** DONE generate with user supplied parameters
**** DONE fix locate art file
- should be list of artifacts
**** DONE default blocks in locator
**** DONE fix lisp template
might put back later (2 parts)
**** DONE fix root level art files
**** DONE fix template problem
**** DONE hook up Locator
**** DONE locate by index for DirLocator
**** DONE handle ART_HOME/locations file
**** DONE refactor for learning (to remember what I did)
***** find everything that uses/calls a function/datum
***** create emacs org-babel code blocks for small pieces
***** create a mock library for the code blocks to use
**** DONE use name for finding artifact
**** DONE list names in local files
**** DONE execution views
**** DONE make work from ex.bat
**** DONE 2nd default block changes defaults
**** DONE default block (sets things like default exec context)
**** DONE generate with default parameters
**** DONE generate command
**** DONE make work with an artifact file in local dir
**** DONE generate code from erb template
**** DONE doc and show commands
**** DONE added pathing
**** DONE show command
**** DONE fixed exec error
**** DONE use HOME variable
**** contexts:
***** DONE ruby
****** DONE plain
****** DONE with stdout
***** DONE system command
***** DONE haskell
**** DONE use configs to input command and pathname
**** DONE pass results along the pipeline
*** TODO merge exec code in as the command line interface
*** TODO issue: looks like an issue with parameter artifact
- find an artifact with code
- create an artifact with a code_location
- save artifact
- save reference
- set code reference
- save artifact?
- generate on parameter artifact
*** TODO change tree node name when artifact is edited
*** TODO issue: newly created node does not show yaml
*** TODO refresh yaml when setting code reference
*** TODO parameter sources
**** DONE the artifact
**** DONE parent
**** DONE refering artifact (parameter artifact (no code of its own))
**** TODO parameter dialog
on the repository/artifact side, passed in as env variable
**** TODO global parameters
just set them in the root artifact
**** TODO random or sequential parameters
***** served by a parameter generating proc
*** TODO setup/teardown for artifacts
*** TODO output expectations
in order to run as a test
*** TODO change to save filename in parent attribute
*** TODO command: delete artifact
*** TODO command: save all artifacts
*** TODO edit attributes graphically (edit view)
*** TODO tree lists are populated through a list(-code) attribute
*** TODO the list attribute can create attributes that exist in the database or virtual
*** TODO implement root artifact
**** TODO has the default list attribute (move population code here)
*** TODO test interface
*** TODO tap interface
*** TODO rack/rails/sinatra interface
**** TODO rack
**** TODO rails
**** TODO sinatra
*** TODO org-babel interface
*** TODO control order in tree
*** TODO send generated code to emacs
*** TODO import artifacts from files/directories/org-files...
*** TODO import previous code and tasks
*** TODO different views on artifact (tabs)
*** TODO 'view code' in artifact
*** TODO tree view of project/container
*** TODO drag artifact/drop on target artifact
**** drop attribute with code that operates on the drag artifact
**** i.e. target may have code to change artifact category
*** TODO specify locations file(s) on command line
*** TODO launch eval window based on a project
- the project will have language, setup/teardown default settings for the examples entered
- a buffer is created that acts as a repl
  - commands/examples are saved in history artifact file
- as the examples are entered, the value of the expressions are sent to an output window
- rails project has the equivalent of script/console?
- subprojects
  - subproject can introduce new defaults for the examples
*** TODO rebase ids
*** TODO timestamps and versioning
*** TODO scid requirements
**** TODO enter and sort(prioritize?) the requirements
*** TODO workflows/pipeline (controller artifact?)
*** TODO artdb
*** TODO artifact with code in filesystem
*** TODO search
**** search results in view
*** TODO search term in artifact path
*** TODO plugin system in artifact form
**** TODO look at freebase
*** TODO consider using rubytree for artifacts tree
*** TODO consider project to actually be a view on an external project (cedet)
tasks that operate on projects interface with the external project tools
small projects may still reside in repository
*** TODO view on filesystem as virtual artifacts
implement through list procedure
*** TODO steal ideas from
**** TODO eev
**** TODO org/babel
*** TODO implement artifact as collection of database information to facilitate scid
*** TODO implement indentation for code generation
*** DONE generate/execute with parameters
a parameter may control whether to generate documentation,
  run the tests, where to save...
*** DONE add code to history subnodes
*** DONE get help
*** DONE elisp executor
*** DONE views
*** DONE implement java executor
*** DONE change history file
*** DONE set params on command line
*** DONE context and location
*** DONE command line repl
**** DONE save history as artifacts
**** DONE can access artifacts from repl
*** DONE show code instead of name option
*** DONE doc command
*** DONE copy in old exec files
- create tests for exec and codebench files; determine which parts of
  the api I like better (if exec is better, replace/merge into codebench)
*** DONE reorganized test.art
*** DONE added execution contexts
*** DONE rename 'source' to 'code'
*** DONE parameterized artifact (source in another artifact)
*** DONE get default parameters from parent
*** DONE capture stdout/err on exec
*** DONE move appropriate code from Repository to Artifact
*** DONE exec/generate parameters
*** DONE fix filenames (get rid of '\'s, make data full path)
*** DONE notes/lists in artifact
got it for free
*** DONE generate source
*** DONE execute artifact
*** DONE remove show page (might add back later)
*** DONE new artifact
*** DONE save artifact
*** DONE implement lazy loading of artifacts
*** DONE flattened data
*** DONE edit artifact
*** DONE new repo file
*** DONE select from list and show the artifact
*** DONE list artifacts from repository
*** DONE added a notebook
*** DONE added repository tree
*** DONE added an about box
*** DONE split the window
*** DONE added statusbar
*** DONE added icon
*** DONE artifacts repository
<appdir>/data/*.art|artdb # initial data (always present on start; i.e. categories, artifacts used by the app)
~/.artifact/locations     # text file with data locations
  ./*.art|artdb
  ~/.artifact/artifacts/**/*.art|artdb
-l <location>             # can specify additional location(s) on the command line
*** DONE create menu
*** DONE refactored app
*** DONE create new app
*** 2012
**** July
***** 3
****** DONE thor file
***** 9
****** explorer
******* DONE start explorer part
** [[D:\dev\src\2014\08Aug\codebench\data\test.art]]
--- 
- name: Projects
  children:
  - name: CodeBench
  - name: Learning Emacs
  - name: Emacs
  - name: Ruby
- name: Generators
- name: Work
  children:
  - code: "\"hello world\""
  - code: "23"
  - name: bob_name
    code: Bob Dobbs
    test: xyz
  - name: don't show
    code: xyz
    show_code: true
  - code: <%= 5 + 7 %>
  - name: Notes
    children:
    - doc: a note
    - name: list
      children:
      - name: first
      - name: second
      - name: third
  - name: art with local
    code: <%= p.test %>
    params: 
      test: 23
    artid: 19
  - name: test puts
    code: puts 'abc'
  - name: out, err, result
    code: |
      puts 'out'
      $stderr.puts 'err'
      23

  - name: art parent with params
    params: 
      test: 23
    children:
    - name: art
      code: <%= p.test %>
      artid: 23
  - name: art parameters 1
    params: 
      test: 10
    code_location: 
    - G:/src/2010/10Oct/codebench/data/test.art
    - 19
  - name: art paramters 2
    params: 
      test: 100
    code_location: 
    - G:/src/2010/10Oct/codebench/data/test.art
    - 23
  - name: system dir
    code: dir
    context: 
    - G:/src/2010/10Oct/codebench/data/test.art
    - 27
- name: Favs
- name: Context
  children:
  - name: System
    code: |
      require 'win32/open3'
      out = err = ""
      Open3.popen3( code ) do |stdin, stdout, stderr|
        out = stdout.read
        err = stderr.read
      end
      { 'out' => out, 'err' => err }

    artid: 27

** notes
*** possible repository structure
**** Projects
***** Learning Emacs (book)
***** Emacs (code)
***** Ruby (learning tests and ad-hoc experiments)
***** EmacsWiki (website)
***** Tap library (code)
***** Programming Ruby (book)
**** Generators (can export constructs or full skeleton apps)
**** Snippets (don't know if necessary w/ Favorites here also)
**** Favorites
**** Categories
**** Execution Contexts
**** Notes (not necessarily executable (contains lists, definitions, links?))
**** Work (temporary artifacts)
***** art1
***** art2
***** art3 (make limit more than 3)(older artifacts are automatically moved into older)
***** older
****** art4 (I lied, work artifacts are kept around until deleted)
*** remember: don't have to split everything into atomic parts
sometimes in the interest of speed and readability, I can tolerate some
repetition and non-dry artifacts
it's just nice to know that I can have things split all the way to the atom

*** formats to execute/generate
**** ruby
***** treetop
***** tap or thor/boson
***** rake
***** rails
**** system/bash/dos
**** haskell
**** lisp
**** c/c++
**** mozart/oz
**** forth
**** prolog
**** sql
**** others
**** emacs
**** nsis
**** codeworker
**** processing
**** alloy
**** xvcl
*** experiments
**** make an artifact(s) that mimics www.rubular.com
**** artifact to show database data
* videos
** [[https://youtu.be/c52QhiXsmyI][REBL]]
* notes
** exec
*** thor
*** org-babel
*** exec method (takes struct)
*** xiki
*** web api
*** suture (other similar)
- part of exec config?
*** value trace
*** symbolic exec
*** repl
*** pipeline
** load environment
** output source tree
** system command
*** build
*** run
** parse output
** generate
*** source
*** instrumented code (from exec config?)
** view
*** doc
*** source (generated)
*** execution results
*** test execution results
*** parse code into ast
*** characterization tests
*** dependencies (known and unknown) (in db?)
*** code slice
*** transformation/conversion
**** code
**** plain text
*** control flow graph
** merge system
*** protect attribute
** use properties in org-mode
*** merge properties
** web app wrapper
** execution config
*** language
*** exec as test
*** different interpreter/compiler
*** library config
*** multiple?
*** change deps (subst deps)
** [[http://mindprod.com/project/scid.html][scid]]
** history file (artifacts from repl history?)
** org file
** list artifacts
** find artifacts
** keep history as
*** text
*** yaml
*** org
*** db
** generate config
*** params
** undo after exec (in exec config?)
** lang
*** ruby - interpret in memory
*** ruby - interpret external
*** clojure
*** racket
*** elisp
*** common lisp
*** text (exec just gives text/identity)
*** system
*** javascript
*** c++
*** c#
*** java
*** haskell
*** <default> => text
*** processing
*** system/atari program in emulator
*** shen
*** prolog
*** forth
*** sql
** language/sublanguage defaults
** sensors
** capture
** replace dep (exec config)
*** value
*** fixture value
*** random value
*** stream value
*** proc call/lambda/fake
** doc
*** keywords
*** categories
*** short and long description
** source, code, text - equivalent
** source -> a collection? (instead of text)
** navigate artifacts (like filesystem)
** database of configurations
*** for lang/sublang
*** has default dependencies
** stages
*** export
*** compile
*** execute
*** view
**** for stage?
**** effects prev stage?
** about
*** show system info (configuration)
** artifact versioning
* todo
** TODO first function (name?)
** DONE make artifact structure in clojure
structure is map
** DONE project for clojure
** DONE get org-mode working
*** things I did
**** fix error in process sentinel: nrepl-server-sentinel: Could not start nREPL server
upgraded cider-nrepl
.lein/profiles.clj:
{:user
  {
  :java-cmd "C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath\\java.exe"
  :plugins [
      [cider/cider-nrepl "0.21.2-SNAPSHOT"]
    ]
   }
 }

**** fix error in process filter: Wrong type argument: char-or-string-p
cause is stale elcs
M-: (byte-recompile-directory "c:/Users/gstanley/AppData/Roaming/.emacs.d/elpa" nil 'force)
**** fix Unable to resolve symbol: -main in this context
***** works under lein repl
***** have to (ns ...) under nrepl in emacs
**** run org code block
***** open project.clj
***** cider-jack-in
***** open file in project dir with code block
***** C-c C-c the block
** 
*** clojure for the brave and true (notes in artifacts)
*** programming clojure (notes in artifacts)
*** text adventure
*** textpipe artifacts
*** run atari program from artifact
**** atari basic artifact
*** sicp note artifacts
*** hyperpolyglot artifacts
*** port xiki to clojure/artifacts
*** how to design programs notes with artifacts
