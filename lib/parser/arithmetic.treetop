grammar Arithmetic
  rule additive
    # because additive "contains" multiplicative expressions, order of operations is built into the parser (* is before +)
    operand_1:multiplicative space additive_op space operand_2:additive {
      def eval(env)
        # dynamically use whichever apply function is bound to that operator
        additive_op.apply(operand_1.eval(env), operand_2.eval(env))
      end
    }
    /
    # base case
    multiplicative
  end

  rule additive_op
    '+' {
      def apply(a, b)
        a + b
      end
    }
    /
    '-' {
      def apply(a, b)
        a - b
      end
    }

  end

  rule multiplicative
    # the operands are labels to address the 2 primaries
    # add a recursive multiplicative to handle arbitrary length expressions
    operand_1:primary space '*' space operand_2:multiplicative {
      def eval(env)
        operand_1.eval(env) * operand_2.eval(env)
      end
    }
    /
    # base case
    primary
  end

  rule space
    ' '*
  end

  # primary is the top level expression so far, allows both rules to be used
  rule primary
    variable / number
  end

  rule variable
    [a-z]+ {
      # env is an environment that holds values the eval function can use
      def eval(env)
        env[name]
      end

      # name creates an index into the env
      def name
        text_value
      end
    }
  end

  rule number
    # parens are necessary because {} would bind to '0' instead of the whole choice expression
    ([1-9] [0-9]* / '0') {
      # text_value: value of matched input
      # env allows number to be used the same way as variable (and default still causes the number test to pass)
      def eval(env = {})
        text_value.to_i
      end
    }
  end
end

